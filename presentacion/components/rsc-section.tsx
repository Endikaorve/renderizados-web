'use client';

import { useRef, useState } from 'react';
import { motion, useInView } from 'framer-motion';
import { Check, X, ChevronDown } from 'lucide-react';
import { Button } from '@/components/ui/button';

export function RSCSection() {
  const ref = useRef(null);
  const isInView = useInView(ref, { once: true, amount: 0.3 });
  const [showProsAndCons, setShowProsAndCons] = useState(false);

  const description = [
    'Representa un cambio paradigm√°tico en c√≥mo pensamos sobre los componentes React, no es una estrategia de renderizado en s√≠ misma.',
    'Introduce una divisi√≥n expl√≠cita entre componentes que se ejecutan exclusivamente en el servidor y componentes que se ejecutan en el cliente.',
    'Los Server Components se ejecutan solo en el servidor y nunca se env√≠an al cliente como JavaScript.',
    'Pueden acceder directamente a recursos del backend (BBDD, APIs internas) de forma segura y eficiente.',
    'Su c√≥digo y dependencias no aumentan el tama√±o del bundle JavaScript enviado al navegador.',
    "Los Client Components, marcados con la directiva 'use client', se renderizan inicialmente en el servidor pero tambi√©n se env√≠an al cliente como JavaScript.",
    'Esto reduce dr√°sticamente el JavaScript del navegador, significando que los RSC en s√≠ no se hidratan.',
    'La hidrataci√≥n solo es necesaria para los Client Components, que s√≠ manejan interactividad y estado en el cliente.',
    'Se combinan con estrategias como SSR o SSG para optimizar la carga inicial y hacer la hidrataci√≥n m√°s selectiva.',
  ];

  const pros = [
    'Menos JavaScript en el cliente: Mejora dr√°stica la velocidad de carga y minimiza la hidrataci√≥n.',
    'Acceso directo y seguro al backend: Simplifica la obtenci√≥n de datos.',
    'Mejora de rendimiento: C√≥mputo pesado en servidor, UI m√°s ligera en cliente.',
    'Carga progresiva con Suspense: Mejora la experiencia de usuario.',
    'Bundle de cliente m√°s peque√±o: Solo los Client Components env√≠an su JS.',
  ];

  const cons = [
    'Curva de aprendizaje: Adaptarse al nuevo modelo mental cliente/servidor.',
    'Limitaciones de los RSC: No pueden usar estado (useState) ni efectos (useEffect) directamente.',
    'Dependencia de Frameworks: Mejor aprovechados con frameworks como Next.js que soportan la arquitectura.',
    'Gesti√≥n de la interactividad: El estado y los eventos se manejan en Client Components, requiriendo una clara separaci√≥n.',
  ];

  return (
    <section
      id="rsc"
      ref={ref}
      className="py-16 md:py-24 border-b border-slate-200 dark:border-slate-800"
    >
      <div className="container mx-auto px-4">
        <motion.div
          initial={{ opacity: 0 }}
          animate={isInView ? { opacity: 1 } : { opacity: 0 }}
          transition={{ duration: 0.8 }}
          className="flex flex-col items-center"
        >
          {/* T√≠tulo */}
          <motion.h2
            initial={{ opacity: 0, y: 20 }}
            animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 20 }}
            transition={{ duration: 0.5 }}
            className="text-3xl font-bold mb-8 text-slate-900 dark:text-white text-center"
          >
            React Server Components (RSC)
          </motion.h2>

          {/* Ilustraci√≥n */}
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={
              isInView ? { opacity: 1, scale: 1 } : { opacity: 0, scale: 0.9 }
            }
            transition={{ duration: 0.7, delay: 0.2 }}
            className="w-full max-w-md mb-10 mx-auto bg-gradient-to-br from-indigo-50 to-violet-50 dark:from-slate-800 dark:to-slate-700 rounded-xl p-6 shadow-lg"
          >
            <div className="flex flex-col h-full justify-between">
              <div className="flex justify-between items-center">
                <div className="text-center">
                  <div className="h-10 w-10 text-indigo-500 mx-auto">üñ•Ô∏è</div>
                  <span className="text-xs mt-1 block text-slate-600 dark:text-slate-400">
                    Servidor
                  </span>
                </div>

                <div className="flex flex-col items-center">
                  <div className="px-2 py-1 bg-indigo-100 dark:bg-indigo-900/50 rounded text-xs text-indigo-700 dark:text-indigo-300">
                    RSC
                  </div>
                  <div className="h-4 w-4 text-slate-500 my-1">‚û°Ô∏è</div>
                  <div className="px-2 py-1 bg-violet-100 dark:bg-violet-900/50 rounded text-xs text-violet-700 dark:text-violet-300">
                    HTML + JSON
                  </div>
                </div>

                <div className="text-center">
                  <div className="h-10 w-10 text-slate-500 mx-auto">üíª</div>
                  <span className="text-xs mt-1 block text-slate-600 dark:text-slate-400">
                    Cliente
                  </span>
                </div>
              </div>

              <div className="mt-4 p-3 bg-white dark:bg-slate-600 rounded-lg shadow-sm">
                <div className="flex justify-between mb-2">
                  <div className="text-xs text-indigo-500 dark:text-indigo-400">
                    Server Components
                  </div>
                  <div className="text-xs text-violet-500 dark:text-violet-400">
                    Client Components
                  </div>
                </div>
                <div className="space-y-2">
                  <div className="h-2 bg-indigo-200 dark:bg-indigo-700 rounded w-full"></div>
                  <div className="flex space-x-1">
                    <div className="h-2 bg-indigo-200 dark:bg-indigo-700 rounded w-1/2"></div>
                    <div className="h-2 bg-violet-200 dark:bg-violet-700 rounded w-1/4"></div>
                  </div>
                  <div className="h-2 bg-violet-200 dark:bg-violet-700 rounded w-1/3"></div>
                </div>
              </div>

              <div className="text-center mt-4">
                <span className="text-sm font-medium text-slate-600 dark:text-slate-300">
                  Divisi√≥n expl√≠cita entre componentes de servidor y cliente
                </span>
              </div>
            </div>
          </motion.div>

          {/* Descripci√≥n en formato de puntos */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 20 }}
            transition={{ duration: 0.5, delay: 0.3 }}
            className="text-lg text-slate-700 dark:text-slate-300 mb-8 max-w-3xl w-full"
          >
            <ul className="space-y-3 list-disc pl-6">
              {description.map((point, index) => (
                <li key={index}>{point}</li>
              ))}
            </ul>
          </motion.div>

          {/* Botones para mostrar diagrama y pros/cons */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 20 }}
            transition={{ duration: 0.5, delay: 0.4 }}
            className="flex flex-wrap gap-4 mb-8 justify-center"
          >
            {!showProsAndCons && (
              <Button
                onClick={() => setShowProsAndCons(true)}
                variant="outline"
                className="flex items-center gap-2"
              >
                Mostrar ventajas y desventajas{' '}
                <ChevronDown className="h-4 w-4" />
              </Button>
            )}
          </motion.div>

          {/* Pros y Contras (condicional) */}
          {showProsAndCons && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              transition={{ duration: 0.5 }}
              className="grid md:grid-cols-2 gap-6 w-full max-w-3xl"
            >
              <div className="bg-green-50 dark:bg-green-900/20 p-4 rounded-lg">
                <h3 className="font-semibold text-green-700 dark:text-green-400 mb-3 flex items-center">
                  <Check className="mr-2 h-5 w-5" /> Ventajas
                </h3>
                <ul className="space-y-2">
                  {pros.map((pro, index) => (
                    <li
                      key={index}
                      className="text-slate-700 dark:text-slate-300 flex"
                    >
                      <span className="mr-2 text-green-500 flex-shrink-0">
                        ‚Ä¢
                      </span>
                      <span>{pro}</span>
                    </li>
                  ))}
                </ul>
              </div>

              <div className="bg-red-50 dark:bg-red-900/20 p-4 rounded-lg">
                <h3 className="font-semibold text-red-700 dark:text-red-400 mb-3 flex items-center">
                  <X className="mr-2 h-5 w-5" /> Desventajas
                </h3>
                <ul className="space-y-2">
                  {cons.map((con, index) => (
                    <li
                      key={index}
                      className="text-slate-700 dark:text-slate-300 flex"
                    >
                      <span className="mr-2 text-red-500 flex-shrink-0">‚Ä¢</span>
                      <span>{con}</span>
                    </li>
                  ))}
                </ul>
              </div>
            </motion.div>
          )}
        </motion.div>
      </div>
    </section>
  );
}
